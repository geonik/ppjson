#!/usr/bin/env python3

import argparse
import sys
import json
import functools




parser = argparse.ArgumentParser(description='Pretty print json files')

parser.add_argument('file', nargs='*',
        help='Input/Ouput file(s).\n' 
        'With 0 arguments read from stdin and write to stdout.\n'
        'With 1 argument read and replace file content in place.\n'
        'With 2 arguments read from the first file and write to the second file.\n'
        )
parser.add_argument('--indent', type=int, default=4, help='Amount of indent. Defaults to %(default)s')
parser.add_argument('--ensure-ascii', action='store_true', help='Make sure only ascii characters are printed to the output. Defaults to %(default)s')

args = parser.parse_args()

# Create partials so we don't repeat the same arguments at invocation
jdump = functools.partial(json.dump, indent = args.indent, ensure_ascii = args.ensure_ascii)
fopen = functools.partial(open, encoding='utf-8')

# Reading from stdin and printing to stdout
if len(args.file) == 0:
    json_object = json.load(sys.stdin)
    jdump(json_object, sys.stdout)
    print('')

# Replacing in place the input file
if len(args.file) == 1:
    with fopen(args.file[0], 'rt') as fh:
        json_object = json.load(fh)
    with fopen(args.file[0], 'wt') as fh:
        jdump(json_object, fh)

# Writting output to new file
if len(args.file) == 2:
    with fopen(args.file[0], 'rt') as fh:
        json_object = json.load(fh)
    with fopen(args.file[1], 'wt') as fh:
        jdump(json_object, fh)

if len(args.file) > 2:
    parser.error('No functionality is provided for more than 2 positional arguments')
